# name: Deploy Microservices

# on:
#   push:
#     branches:
#       - main
#   workflow_dispatch:

# jobs:
#   deploy-book-catalog:
#     runs-on: ubuntu-latest
    
#     env:
#       VERSION: ${{ github.sha }}
#       SERVICE_NAME: book_catalog
#       AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
#       AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
#       AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
#       AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

#     steps:
#       - uses: actions/checkout@v3

#       # Terraform Setup
#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v2
#         with:
#           terraform_version: 1.5.6

#       - name: Terraform Init
#         run: terraform init
#         working-directory: ./scripts/tera

#       # Terraform Apply with improved visibility and error handling
#       - name: Terraform Apply
#         id: apply
#         run: |
#           echo "Starting Terraform Apply..."
#           terraform apply -auto-approve &
#           apply_pid=$!
          
#           while kill -0 $apply_pid 2>/dev/null; do
#             echo "Terraform apply still running... ($(date))"
#             sleep 30
#           done
          
#           wait $apply_pid
#           apply_exit_code=$?
          
#           echo "Terraform Apply Exit Code: $apply_exit_code"
          
#           if [ $apply_exit_code -ne 0 ]; then
#             echo "Terraform Apply failed. Check the logs for more details."
#             exit $apply_exit_code
#           fi
#         working-directory: ./scripts/tera
#         env:
#           ARM_CLIENT_ID: ${{ env.AZURE_CLIENT_ID }}
#           ARM_CLIENT_SECRET: ${{ env.AZURE_CLIENT_SECRET }}
#           ARM_TENANT_ID: ${{ env.AZURE_TENANT_ID }}
#           ARM_SUBSCRIPTION_ID: ${{ env.AZURE_SUBSCRIPTION_ID }}

#       # Get ACR Credentials
#       - name: Get ACR Credentials
#         id: outputs
#         run: |
#           echo "registry_hostname=$(terraform output -raw registry_hostname)" >> $GITHUB_OUTPUT
#           echo "registry_un=$(terraform output -raw registry_un)" >> $GITHUB_OUTPUT
#           echo "registry_pw=$(terraform output -raw registry_pw)" >> $GITHUB_OUTPUT
#         working-directory: ./scripts/tera

#       # Set Registry Credentials
#       - name: Set Registry Credentials
#         run: |
#           echo "CONTAINER_REGISTRY=${{ steps.outputs.outputs.registry_hostname }}" >> $GITHUB_ENV
#           echo "REGISTRY_UN=${{ steps.outputs.outputs.registry_un }}" >> $GITHUB_ENV
#           echo "REGISTRY_PW=${{ steps.outputs.outputs.registry_pw }}" >> $GITHUB_ENV

#       # Build and Push Docker Image
#       - name: Build
#         run: ./scripts/build-image.sh
#         env:
#           DOCKERFILE_PATH: ./book_catalog/Dockerfile
#           IMAGE_NAME: ${{ env.CONTAINER_REGISTRY }}/${{ env.SERVICE_NAME }}:${{ env.VERSION }}

#       - name: Publish
#         run: ./scripts/push-image.sh
#         env:
#           IMAGE_NAME: ${{ env.CONTAINER_REGISTRY }}/${{ env.SERVICE_NAME }}:${{ env.VERSION }}
#           REGISTRY_UN: ${{ env.REGISTRY_UN }}
#           REGISTRY_PW: ${{ env.REGISTRY_PW }}

#       # Deploy to Kubernetes
#       - uses: tale/kubectl-action@v1
#         with:
#           base64-kube-config: ${{ secrets.KUBE_CONFIG }}
#           kubectl-version: v1.24.2

#       - name: Deploy
#         run: ./scripts/deploy.sh
#         env:
#           IMAGE_NAME: ${{ env.CONTAINER_REGISTRY }}/${{ env.SERVICE_NAME }}:${{ env.VERSION }}
#           DATABASE_URL: ${{ secrets.DATABASE_URL }}
          
#   deploy-inventory-management:
#     runs-on: ubuntu-latest
#     needs: deploy-book-catalog  # This ensures book_catalog is deployed first
    
#     env:
#       VERSION: ${{ github.sha }}
#       SERVICE_NAME: inventory_management
#       AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
#       AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
#       AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
#       AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

#     steps:
#       - uses: actions/checkout@v3

#       # We don't need to run Terraform again, as it's already been applied

#       # Get ACR Credentials (reusing the outputs from the previous job)
#       - name: Get ACR Credentials
#         id: outputs
#         run: |
#           echo "registry_hostname=$(terraform output -raw registry_hostname)" >> $GITHUB_OUTPUT
#           echo "registry_un=$(terraform output -raw registry_un)" >> $GITHUB_OUTPUT
#           echo "registry_pw=$(terraform output -raw registry_pw)" >> $GITHUB_OUTPUT
#         working-directory: ./scripts/tera

#       # Set Registry Credentials
#       - name: Set Registry Credentials
#         run: |
#           echo "CONTAINER_REGISTRY=${{ steps.outputs.outputs.registry_hostname }}" >> $GITHUB_ENV
#           echo "REGISTRY_UN=${{ steps.outputs.outputs.registry_un }}" >> $GITHUB_ENV
#           echo "REGISTRY_PW=${{ steps.outputs.outputs.registry_pw }}" >> $GITHUB_ENV

#       # Build and Push Docker Image
#       - name: Build
#         run: ./scripts/build-image.sh
#         env:
#           DOCKERFILE_PATH: ./inventory_management/Dockerfile
#           IMAGE_NAME: ${{ env.CONTAINER_REGISTRY }}/${{ env.SERVICE_NAME }}:${{ env.VERSION }}

#       - name: Publish
#         run: ./scripts/push-image.sh
#         env:
#           IMAGE_NAME: ${{ env.CONTAINER_REGISTRY }}/${{ env.SERVICE_NAME }}:${{ env.VERSION }}
#           REGISTRY_UN: ${{ env.REGISTRY_UN }}
#           REGISTRY_PW: ${{ env.REGISTRY_PW }}

#       # Deploy to Kubernetes
#       - uses: tale/kubectl-action@v1
#         with:
#           base64-kube-config: ${{ secrets.KUBE_CONFIG }}
#           kubectl-version: v1.24.2

#       - name: Deploy
#         run: ./scripts/deploy.sh
#         env:
#           IMAGE_NAME: ${{ env.CONTAINER_REGISTRY }}/${{ env.SERVICE_NAME }}:${{ env.VERSION }}
#           DATABASE_URL: ${{ secrets.DATABASE_URL }}